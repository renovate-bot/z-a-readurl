#autoload
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# Copyright (c) 2019-2020 Sebastian Gniazdowski
# Copyright (c) 2021 Z-Shell Community

â†’za-readurl-preinit-handler() {

  builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
  builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

  if [[ $ICE[as] != (readurl*|*readurl) && $ICE[.readurl] != (readurl*|*readurl) ]]; then
  # No need to load the rest of the file
    return 0
  fi

  [[ $1 = plugin ]] && {
    +zi-message "{annex}readurl-annex{ehi}:{rst} {ice}as{hi}'{rst}$ICE[as]{hi}'{error} ice can be used only with snippets{rst}"
    return 7
  }

  local __type=$1 __url=$2 __id_as=$3 __dir=$4 __hook=$5 __subtype=$6

  ICE[.readurl]=${ICE[.readurl]:-$ICE[as]}

  if [[ $ICE[as] = ((readurl\||)(command|program)|(command|program)(\|readurl|)) ]] {
    ICE[as]=command
  } elif [[ $ICE[as] = ((readurl\||)completion|completion(\|readurl|)) ]] {
    ICE[as]=completion
  } elif [[ $ICE[as] = ((readurl\||)null|null(\|readurl|)) ]] {
    ICE[as]=null
    ICE[pick]=${ICE[pick]:-/dev/null}
  } else {
    if [[ $ICE[as] != readurl ]] {
      +zi-message "{annex}readurl-annex{ehi}:{rst} {warn}" \
      "Unrecognized {ice}as{hi}'{data}readurl|{data2}...{hi}'{warn} variant {rst}({data2}$ICE[as]{rst}).{warn}" \
      "Falling back to {ice}as{hi}'{data}readurl{hi}'{warn}{rst}"
    }
    unset 'ICE[as]'
  }

  if [[ -d $__dir && $__subtype != update(|:*) ]] {
    return 0
  }

  local -a match mbegin mend
  local MATCH
  integer MBEGIN MEND

  (( $+functions[.zi-setup-plugin-dir] )) || builtin source ${ZI[BIN_DIR]}/lib/zsh/install.zsh

  match=()
  local dlpage=${__url%(#b)([^+])++*}
  dlpage=$dlpage$match[1]

  if [[ $ICE[dl] == (*\;)(#c0,1)ink(0)(#c0,1)[=:](#c0,1)[-_/[:alnum:]]* ]] {
    ICE[dlink]=${(j.;.)${${(@M)${(@s.;.)ICE[dl]}:#ink([=:]|)*}##ink([=:]|)}}
    ICE[dl]=${(j.;.)${(@s.;.)ICE[dl]}:#ink([=:]|)*}
    [[ -z $ICE[dlink] ]] && unset 'ICE[dlink]'
    [[ -z $ICE[dl] ]] && unset 'ICE[dl]'
  }

  if [[ -z $ICE[dlink] ]] {
    local plus=${(MS)__url%%[^+]++##} pattern_url=$dlpage
    plus=${plus#?++}
    while [[ -n $plus ]] {
      pattern_url=${pattern_url:h}
      plus=${plus%+}
    }
    local pattern_url=${pattern_url}/${__url##*++}
  } else {
    local -a urls sorts filters
    urls=( ${(s.;.)ICE[dlink]} )
    if (( ${#urls} == 2 )) {
      local pattern_url=${urls[@]:#0*} pattern_url0=${${(M)urls[@]:#0*}##0(:|=)(#c0,1)}
      if [[ $pattern_url == \!* ]] {
        sorts[2]=1
        pattern_url=${pattern_url#\!}
      }
      if [[ $pattern_url == *[^\\]([\\][\\])#\~%[^%]##%* ]] {
        if [[ $pattern_url == (#b)(*)\~%([^%]##)%(*) ]] {
          pattern_url=$match[1]$match[3]
          filters[2]=$match[2]
        }
      }
      if [[ $pattern_url0 == \!* ]] {
        sorts[1]=1
        pattern_url0=${pattern_url0#\!}
      }
      if [[ $pattern_url0 == *[^\\]([\\][\\])#\~%[^%]##%* ]] {
        if [[ $pattern_url0 == (#b)(*)\~%([^%]##)%(*) ]] {
          pattern_url0=$match[1]$match[3]
          filters[1]=$match[2]
        }
      }
    } elif (( ${#urls} == 1 )) {
      local pattern_url=${urls[@]:#0*} pattern_url0=${${(M)urls[@]:#0*}##0(:|=)(#c0,1)}
      if [[ -n $pattern_url0 ]] {
        +zi-message "{annex}readurl-annex{ehi}:{rst} {error}" \
          "The {ice}dlink0''{error} ice cannot be used alone," \
          "{ice}dlink''{error} is always required{rst}"
        return 9
      }
      if [[ $pattern_url == \!* ]] {
        sorts[1]=1
        pattern_url=${pattern_url#\!}
      }
      if [[ $pattern_url == *[^\\]([\\][\\])#\~%[^%]##%* ]] {
        if [[ $pattern_url == (#b)(*)\~%([^%]##)%(*) ]] {
          pattern_url=$match[1]$match[3]
          filters[1]=$match[2]
        }
      }
    } elif (( ${#urls} > 2 )) {
      +zi-message "{annex}readurl-annex{ehi}:{rst} {error}The ice {ice}dlink''{error}" \
        "has been used too many times: {num}${#urls}{error}, while it can be used at most" \
        "two times, as {ice}dlink0''{error} and then {ice}dlink''{error}, aborting{rst}"
      return 9
    } else {
      local pattern_url=$ICE[dlink]
    }
  }


  local -A map
  map=( ".*" "*" ".+" "?##" "+" "##" "*" "#" )
  local -a filters
  filters=( "${filters[@]//(#b)(${(~kj.|.)map})/$map[$match[1]]}" )

  local tmpfile="$(mktemp)"

  pattern_url=${pattern_url//\%VERSION\%/[.,a-zA-Z0-9_-]+}
  local pattern_url0=${pattern_url0//\%VERSION\%/[.,a-zA-Z0-9_-]+}

  integer index
  local cur_paturl
  for cur_paturl ( $pattern_url0 $pattern_url ) {
    index+=1
    .zi-download-file-stdout $dlpage >! $tmpfile || {
      .zi-download-file-stdout $dlpage 1 >! $tmpfile || {
        +zi-message "{annex}readurl-annex{ehi}:{rst} {error}Couldn't" \
          "fetch the download page ({url}${dlpage//\%/%%}{error}){rst}"
        return 9
      }
    }
    local -a list
    list=( ${(@f)"$(noglob command egrep -io "href=.?$cur_paturl" $tmpfile)"} )
    if (( sorts[index] )) {
      list=( ${list[@]:#[^[:digit:]]##} )
      list=( ${(On)list[@]} )
    }
    if [[ -n $filters[index] ]] {
      list=( ${list[@]:#href=(?|)$~filters[index]} )
    }
    local selected=${list[1]#href=}
    selected=${selected#[\"\']}

    if [[ -z $selected ]] {
      +zi-message "{annex}readurl-annex{ehi}:{rst}" \
      "couldn't match the URL${${(M)cur_paturl:#$pattern_url0}:+-0} at the download page" \
      "(which is {url}${dlpage//\%/%%}{rst}${${__id_as:#$__url}:+; the snippet is being identified as" \
"[meta]${__id_as}[rst]%b}; was matching {data2}${cur_paturl}{rst}%b)."
      return 9
    }

    if [[ $selected = /* ]] {
      local domain protocol
      if [[ $dlpage = (#b)(#i)((http(s|)|ftp(s|)|ssh|scp)://|)([^/]##)(*) ]] {
        protocol=$match[1] domain=$match[5]
      }
      if [[ -z $domain ]] {
      +zi-message "{annex}readurl-annex{ehi}:{rst} {error}Couldn't establish the domain name (unsupported" \
        "protocol? supported are: {data}http(s){error},{data}ftp(s){error},{data}ssh{error},{data}scp{error}){rst}"
      return 9
      }
      local new_url=${protocol:-http://}$domain$selected
      } elif [[ $selected = (#i)(http(s|)|ftp(s|)|ssh|scp)://* ]] {
        local new_url=$selected
      } else {
        local -a exts
      exts=(
        xhtml htmls html htm php php3 php4 phtml
        pl asp aspx ece js jsp jspx jhtml cfm py
        rb rhtml shtml cgi
      )
      if [[ $dlpage = *.(${(~j:|:)exts}) ]] {
        local new_url=${dlpage:h}/$selected
      } else {
        local new_url=$dlpage/$selected
      }
    }
    # Assign in case there's dlink0 given (i.e.: that this
    # URL was the dlink0 URL)
    dlpage=$new_url
  }

  # Handle the update
  if [[ $__subtype == update(|:*) && -z $opts[(r)-f] ]] {
    { local old_url="$(<$__dir/._zi/url_rsvd)"; } 2>/dev/null
    [[ $old_url == $new_url ]] && return 8
  }

  # Assign outer-scope parameters
  url=$new_url
  ICE[url_rsvd]=$new_url
  ZI[annex-multi-flag:pull-active]=2

  if [[ $__subtype == update(|:*) ]] {
    typeset -gA OPTS
    OPTS[opt_-q,--quiet]=0
  }

  +zi-message "{annex}readurl-annex{ehi}:{rst} {msg}Matched the following URL: {url}${new_url}{rst}"
  return 0
}
